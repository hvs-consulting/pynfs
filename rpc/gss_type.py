# Generated by rpcgen.py from ./gss.x on Fri Feb 14 09:26:47 2025
import sys,os
from . import gss_const as const
class rpc_gss_cred_vers_1_t:
    # XDR definition:
    # struct rpc_gss_cred_vers_1_t {
    #     rpc_gss_proc_t gss_proc;
    #     uint seq_num;
    #     rpc_gss_service_t service;
    #     opaque handle<>;
    # };
    def __init__(self, gss_proc=None, seq_num=None, service=None, handle=None):
        self.gss_proc = gss_proc
        self.seq_num = seq_num
        self.service = service
        self.handle = handle

    def __repr__(self):
        out = []
        if self.gss_proc is not None:
            out += ['gss_proc=%s' % const.rpc_gss_proc_t.get(self.gss_proc, self.gss_proc)]
        if self.seq_num is not None:
            out += ['seq_num=%s' % repr(self.seq_num)]
        if self.service is not None:
            out += ['service=%s' % const.rpc_gss_service_t.get(self.service, self.service)]
        if self.handle is not None:
            out += ['handle=%s' % repr(self.handle)]
        return 'rpc_gss_cred_vers_1_t(%s)' % ', '.join(out)
    __str__ = __repr__

class rpc_gss_cred_t:
    # XDR definition:
    # union rpc_gss_cred_t switch(uint vers) {
    #     case RPCSEC_GSS_VERS_1:
    #         rpc_gss_cred_vers_1_t rpc_gss_cred_vers_1_t;
    # };
    def __init__(self, vers=None, rpc_gss_cred_vers_1_t=None):
        self.vers = vers
        self.rpc_gss_cred_vers_1_t = rpc_gss_cred_vers_1_t

    switch = property(lambda s: {const.RPCSEC_GSS_VERS_1:s.rpc_gss_cred_vers_1_t,}[s.vers])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.vers is not None:
            out += ['vers=%s' % repr(self.vers)]
        if self.rpc_gss_cred_vers_1_t is not None:
            out += ['rpc_gss_cred_vers_1_t=%s' % repr(self.rpc_gss_cred_vers_1_t)]
        return 'rpc_gss_cred_t(%s)' % ', '.join(out)
    __str__ = __repr__

class rpc_gss_init_arg:
    # XDR definition:
    # struct rpc_gss_init_arg {
    #     opaque gss_token<>;
    # };
    def __init__(self, gss_token=None):
        self.gss_token = gss_token

    def __repr__(self):
        out = []
        if self.gss_token is not None:
            out += ['gss_token=%s' % repr(self.gss_token)]
        return 'rpc_gss_init_arg(%s)' % ', '.join(out)
    __str__ = __repr__

class rpc_gss_init_res:
    # XDR definition:
    # struct rpc_gss_init_res {
    #     opaque handle<>;
    #     uint gss_major;
    #     uint gss_minor;
    #     uint seq_window;
    #     opaque gss_token<>;
    # };
    def __init__(self, handle=None, gss_major=None, gss_minor=None, seq_window=None, gss_token=None):
        self.handle = handle
        self.gss_major = gss_major
        self.gss_minor = gss_minor
        self.seq_window = seq_window
        self.gss_token = gss_token

    def __repr__(self):
        out = []
        if self.handle is not None:
            out += ['handle=%s' % repr(self.handle)]
        if self.gss_major is not None:
            out += ['gss_major=%s' % repr(self.gss_major)]
        if self.gss_minor is not None:
            out += ['gss_minor=%s' % repr(self.gss_minor)]
        if self.seq_window is not None:
            out += ['seq_window=%s' % repr(self.seq_window)]
        if self.gss_token is not None:
            out += ['gss_token=%s' % repr(self.gss_token)]
        return 'rpc_gss_init_res(%s)' % ', '.join(out)
    __str__ = __repr__

class rpc_gss_integ_data:
    # XDR definition:
    # struct rpc_gss_integ_data {
    #     opaque databody_integ<>;
    #     opaque checksum<>;
    # };
    def __init__(self, databody_integ=None, checksum=None):
        self.databody_integ = databody_integ
        self.checksum = checksum

    def __repr__(self):
        out = []
        if self.databody_integ is not None:
            out += ['databody_integ=%s' % repr(self.databody_integ)]
        if self.checksum is not None:
            out += ['checksum=%s' % repr(self.checksum)]
        return 'rpc_gss_integ_data(%s)' % ', '.join(out)
    __str__ = __repr__

class rpc_gss_data_t:
    # XDR definition:
    # struct rpc_gss_data_t {
    #     uint seq_num;
    #     proc_req_arg_t arg;
    # };
    def __init__(self, seq_num=None, arg=None):
        self.seq_num = seq_num
        self.arg = arg

    def __repr__(self):
        out = []
        if self.seq_num is not None:
            out += ['seq_num=%s' % repr(self.seq_num)]
        if self.arg is not None:
            out += ['arg=%s' % repr(self.arg)]
        return 'rpc_gss_data_t(%s)' % ', '.join(out)
    __str__ = __repr__

class rpc_gss_priv_data:
    # XDR definition:
    # struct rpc_gss_priv_data {
    #     opaque databody_priv<>;
    # };
    def __init__(self, databody_priv=None):
        self.databody_priv = databody_priv

    def __repr__(self):
        out = []
        if self.databody_priv is not None:
            out += ['databody_priv=%s' % repr(self.databody_priv)]
        return 'rpc_gss_priv_data(%s)' % ', '.join(out)
    __str__ = __repr__

